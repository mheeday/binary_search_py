#include <vector>
#include <iostream>
#include <chrono>

int bin_sort (std::vector <int> v, int b) {
    if (b == v.front()) {
        return 0;
    }
    else if ( b == v.back()) {
        return (v.size() - 1);
    }
    else {
        int bias = 0;
        
        while (v.size() > 1) {
            int half = v.size()/2;

            if (b == v.at(half)) {
                return half+bias;
            }
            else if (b < v.at(half)) {
                v = std::vector <int> (v.begin(), v.end()-half);
                continue;
            } 
            else {
                v = std::vector <int> (v.begin()+half, v.end());
                bias +=half;                
            }
        }
    return -1;
    }
}

int main () {

    //std::vector <int> new_vec = {1,2,3,4,5,6,7,8,9};
    std::vector <int> new_vec = {2, 2, 3, 4, 5, 6, 6, 6, 7, 8, 10, 11, 12, 14, 20, 21, 24, 25, 26, 28, 30, 31, 31, 31, 32, 34, 35, 36, 36, 40, 41, 43, 46, 49, 51, 52, 52, 53, 54, 54, 56, 59, 60, 60, 61, 61, 61, 63, 64, 66, 66, 67, 67, 67, 68, 69, 71, 71, 72, 72, 73, 73, 74, 75, 75, 76, 76, 77, 78, 79, 79, 80, 81, 82, 82, 83, 83, 84, 86, 86, 86, 90, 90, 91, 92, 92, 94, 95, 95, 95, 97, 98, 100, 100, 101, 103, 103, 103, 105, 106, 107, 109, 109, 110, 110, 110, 111, 113, 114, 114, 117, 118, 119, 121, 121, 121, 122, 122, 123, 123, 124, 125, 125, 126, 129, 130, 131, 132, 133, 134, 134, 136, 137, 138, 139, 139, 140, 140, 141, 142, 143, 145, 146, 146, 147, 147, 147, 148, 150, 150, 150, 154, 154, 154, 155, 155, 156, 161, 163, 164, 165, 165, 166, 167, 167, 168, 168, 169, 171, 172, 172, 173, 173, 173, 174, 176, 176, 177, 177, 177, 177, 180, 180, 181, 184, 187, 187, 188, 189, 190, 190, 193, 196, 197, 197, 199, 199, 201, 201, 202, 204, 205, 206, 206, 207, 207, 208, 208, 211, 215, 216, 216, 220, 221, 221, 221, 222, 222, 223, 223, 225, 225, 226, 227, 231, 231, 232, 232, 232, 234, 234, 234, 234, 235, 238, 242, 242, 244, 246, 246, 246, 247, 249, 249, 251, 251, 257, 257, 257, 257, 260, 261, 261, 262, 263, 264, 264, 265, 265, 268, 268, 270, 270, 271, 271, 272, 273, 274, 274, 275, 276, 276, 277, 281, 282, 282, 289, 291, 291, 294, 295, 295, 296, 296, 298, 298, 301, 301, 302, 302, 305, 306, 306, 307, 308, 311, 311, 312, 312, 312, 313, 314, 315, 318, 319, 321, 321, 322, 322, 322, 322, 323, 326, 328, 328, 328, 329, 329, 329, 331, 331, 331, 333, 334, 336, 336, 337, 337, 340, 340, 341, 341, 342, 342, 344, 344, 345, 346, 348, 350, 351, 352, 353, 354, 356, 357, 357, 358, 365, 368, 368, 369, 369, 369, 373, 373, 373, 373, 374, 376, 376, 379, 379, 381, 381, 382, 382, 383, 383, 384, 385, 385, 385, 385, 386, 386, 386, 388, 389, 392, 394, 394, 394, 394, 396, 397, 397, 403, 403, 404, 405, 405, 405, 406, 406, 406, 406, 407, 407, 407, 408, 410, 412, 414, 415, 417, 417, 417, 418, 419, 420, 421, 421, 422, 422, 422, 422, 426, 427, 427, 428, 429, 431, 432, 432, 433, 434, 435, 436, 436, 437, 438, 438, 438, 438, 438, 442, 443, 443, 444, 445, 445, 446, 448, 448, 450, 451, 452, 452, 453, 453, 454, 455, 457, 458, 458, 459, 460, 461, 463, 464, 464, 466, 467, 467, 467, 467, 468, 469, 469, 469, 471, 473, 473, 475, 477, 477, 477, 478, 479, 479, 479, 481, 486, 486, 487, 487, 488, 488, 492, 492, 492, 495, 495, 495, 496, 497, 499, 500, 500};
    int to_find = 328;
    int answer;
    //std::cin >> to_find;
    auto start =  std::chrono::high_resolution_clock::now();
    answer = bin_sort(new_vec, to_find);
    auto stop =  std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast <std::chrono::microseconds> (stop - start);
    std::cout << "Elasped time is " << duration.count() << std::endl;    
    std::cout << "Location of " << to_find << " is " <<  answer << std::endl;
    std::cout << new_vec.at(answer) << std::endl;

    return 0;
}